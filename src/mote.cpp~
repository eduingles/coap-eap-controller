/// Server example for cantcoap that responds to the ETSI IoT CoAP Plugtests.
/**
 * This example waits for CoAP packets and responds accordingly.It is designed to work with 
 * the ETSI IoT CoAP Plugtests (http://www.etsi.org/plugtests/coap/coap.htm). Put this on
 * A public IP somewhere, and use the website http://coap.me to drive the tests.
 *
 * Note, the tests on coap.me are a bit odd.
 */
#define __USE_POSIX 1

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <sys/time.h>
#include <math.h>

#include "cantcoap-master/nethelper.h"
#include "cantcoap-master/cantcoap.h"
#include "cantcoap-master/uthash.h"

#ifdef __cplusplus
extern "C" {
#endif

#include "panatiki/include.h"
#include "panatiki/eap-peer.h"
#include "panatiki/eap-psk.h"

	//void *xmalloc(unsigned size);


#ifdef __cplusplus
}
#endif



int nonce_c;
int nonce_s;
int location_path;

//uint8_t *msk_key;
unsigned char auth_key[16] = {0};
unsigned char sequence[12] = {0};
uint8_t authKeyAvailable; 


void printf_hex(unsigned char *hex, unsigned int l)
{
	int i;
	if (hex != NULL){	
		for (i=0; i < l; i++)
			printf("%02x",hex[i]);

		printf("\n");
	}
}


//void callback(char *uri, method);

///////////// Begin Resource Stuff ///////////////
// call backs and some other crap for mapping URIs
// you might be thinking, huh, why not make a dynamic
// way to construct this, and that might make sense
// for a high performance machine, but on an embedded
// device you really don't want all these strings in RAM

typedef int (*ResourceCallback)(CoapPDU *pdu, int sockfd, struct sockaddr_storage *recvFrom);

// using uthash for the URI hash table. Each entry contains a callback handler.
struct URIHashEntry {
	const char *uri; 
	ResourceCallback callback;
	int id;
	UT_hash_handle hh;
};

// callback functions defined here
int gTestCallback(CoapPDU *request, int sockfd, struct sockaddr_storage *recvFrom) {

	unsigned char *payload, *token, *ptr, *auth;
	bool isTime = false;

	int len;
	uint8_t mac[16] ={0};
	uint8_t mac2check[16] ={0};
	uint8_t zero[16] ={0};
	uint8_t macacero[16] ={0};

	socklen_t addrLen = sizeof(struct sockaddr_in);
	if(recvFrom->ss_family==AF_INET6) {
		addrLen = sizeof(struct sockaddr_in6);
	}
	DBG("gTestCallback function called");

	//  prepare appropriate response
	CoapPDU *response = new CoapPDU();
	response->setVersion(1);
	response->setMessageID(request->getMessageID());
	response->setToken(request->getTokenPointer(),request->getTokenLength());
	response->setURI((char*)"auth",4);


	// respond differently, depending on method code
	switch(request->getCode()) {
		case CoapPDU::COAP_EMPTY:
			// makes no sense, send RST
			break;


		case CoapPDU::COAP_POST:

//			memcpy((void *)&nonce_s,rand(),4);
			nonce_s = rand();
			response->setCode(CoapPDU::COAP_CREATED);
//			response->setPayload(request->getPayloadPointer(),request->getPayloadLength());
			response->setPayload(  (uint8_t *)&nonce_s, request->getPayloadLength());
			memcpy(&nonce_c, request->getPayloadPointer(),request->getPayloadLength());

			ptr = (unsigned char*)&sequence;


			printf("\n token: \n");
			printf_hex((unsigned char *)request->getTokenPointer(),4);

			printf("\n nonce_c: \n");
			printf_hex((unsigned char *)&nonce_c,4);


			memcpy(ptr,request->getTokenPointer(),request->getTokenLength());
			ptr += 4;

			printf("SEQUENCE1: \n");
			printf_hex((unsigned char *) sequence, 12);
			
			memcpy(ptr, &(nonce_c),sizeof(unsigned int));
			ptr += 4;			

			printf("SEQUENCE2: \n");
			printf_hex((unsigned char *) sequence, 12);
			
			memcpy(ptr, &(nonce_s),sizeof(unsigned int));

			printf("SEQUENCE3: \n");
			printf_hex((unsigned char *) sequence, 12);

			printf("\nsequence: \n");
			printf_hex(sequence,12);

			// EAP Restart
			memset(&msk_key,0, MSK_LENGTH);
			eapRestart=TRUE;
			eap_peer_sm_step(NULL);

			break;

		case CoapPDU::COAP_PUT:
			response->setCode(CoapPDU::COAP_CHANGED);

			if(!eapKeyAvailable){ // EAP EXCHANGE FINISHED
				printf("---------------\nEAP EXCHANGE IN COURSE \n");

				eapReq=TRUE;
				payload = (unsigned char *)request->getPayloadPointer();

				printf("Payload\n");
				printf_hex(request->getPayloadPointer(),request->getPayloadLength());

				eap_peer_sm_step(payload);

				if (eapResp){
					printf("Hay EAP response %d\n",ntohs( ((struct eap_msg*) eapRespData)->length));
					printf_hex(eapRespData,len = ntohs( ((struct eap_msg*) eapRespData)->length));
				}else{
					printf("NO HAY EAP RESPONSE\n");
				}

				response->setPayload(eapRespData, len);


			}
			else{ 	

				/*	Verificamos la mac del mensaje recibido
				 * */

				// EAP EXCHANGE FINISHED
				printf("EAP EXCHANGE FINISHED\n");


				printf("msk: \n");
				printf_hex(msk_key,16);

				printf("sequence: \n");
				printf_hex(sequence,12);

				do_omac((unsigned char*)msk_key, (unsigned char*)sequence, 
						12, (unsigned char*)auth_key);
				authKeyAvailable=TRUE;

				printf("auth_key\n");
				printf_hex(auth_key, 16);

				// asfasdfasdfa
				auth = request->getAUTH();

				printf("auth: \n");
				printf_hex(auth,16);

				memcpy(request->getPDUPointer()+request->getPDULength()-21,&zero,16);

				printf("message with zero: \n");
				printf_hex(request->getPDUPointer(),request->getPDULength());


				do_omac((unsigned char*)auth_key, (unsigned char*)request->getPDUPointer(), 
						request->getPDULength(), (unsigned char*)mac2check);

				printf("second auth: \n");
				printf_hex(mac2check,16);

				response->addOption(CoapPDU::COAP_OPTION_AUTH,16,(uint8_t *)&zero);


				isTime = true;

			}

			break;

		default: 
			break;
	}

	// type
	switch(request->getType()) {

		case CoapPDU::COAP_CONFIRMABLE:
			response->setType(CoapPDU::COAP_ACKNOWLEDGEMENT);
			break;

		case CoapPDU::COAP_NON_CONFIRMABLE:
			response->setType(CoapPDU::COAP_ACKNOWLEDGEMENT);

			break;
		case CoapPDU::COAP_ACKNOWLEDGEMENT:

			break;
		case CoapPDU::COAP_RESET:

			break;
		default:
			return 1;
			break;
	};


	if(eapKeyAvailable && isTime){
		do_omac((unsigned char*)auth_key, (unsigned char*)response->getPDUPointer(), 
				response->getPDULength(), (unsigned char*)mac);

		printf("resposne with zero: \n");
		printf_hex(response->getPDUPointer(),response->getPDULength());


		printf("newmac : \n");
		printf_hex(mac,16);


		memcpy(response->getPDUPointer()+response->getPDULength()-16,&mac,16);

		printf("resposne complete: \n");
		printf_hex(response->getPDUPointer(),response->getPDULength());

	}

	printf("vamos a enviar el ack \n");

	// send the packet
	ssize_t sent = sendto(
			sockfd,
			response->getPDUPointer(),
			response->getPDULength(),
			0,
			(sockaddr*)recvFrom,
			addrLen
			);
	if(sent<0) {
		DBG("Error sending packet: %ld.",sent);
		perror(NULL);
		return 1;
	} else {
		DBG("Sent: %ld",sent);
	}

	return 0;
}

// resource URIs here
const char *gURIA = "/auth";

const char *gURIList[] = {
	gURIA,
};

// URIs mapped to callback functions here
const ResourceCallback gCallbacks[] = {
	gTestCallback	
};

const int gNumResources = 1;

///////////// End Resource Stuff //////////////

// for mbed compatibility
#define failGracefully exit


int startAuth(int sockfd, struct addrinfo *remoteAddress)
{
	fd_set mreadset; /*master read set*/
	struct timeval  tval;
	int msecWait=2000;
	int maxRetr=3;
	int state=0;
	int last_length=0;
	int ret = 0;
	CoapPDU *request,*response;
	bool valid = 0;

	/*********Preparing GET Auth**************/
	request = new CoapPDU();
	request->setVersion(1);
	request->setType(CoapPDU::COAP_CONFIRMABLE);
	request->setCode(CoapPDU::COAP_GET);
	int token=1;
	request->setToken((uint8_t*)&token,4);
	request->setMessageID(htons(0x0000));
	request->setURI((char*)"auth",4);
	/*****************************************/

	do {
		if(!valid)
		ret = sendto(sockfd,request->getPDUPointer(),request->getPDULength(),0,remoteAddress->ai_addr,remoteAddress->ai_addrlen);

		if(ret != request->getPDULength()) {
			printf("Error sending packet.\n");
			perror(NULL);
			return -1;
		}

		printf("GET request sent\n");
		request->printHuman();
		request->printHex();

		FD_ZERO(&mreadset);
		FD_SET(sockfd, &mreadset);
		tval.tv_sec  = msecWait / 1000;
		tval.tv_usec = (msecWait % 1000) * 1000; 

		ret=select(sockfd+1, &mreadset, NULL, NULL, &tval);


		if (ret)
		{
			if (FD_ISSET(sockfd,&mreadset))
			{			
				//receive packet

				char buffer[500];
				struct sockaddr_in6 remote_addr6;
				socklen_t addr_size=sizeof(remote_addr6);
				bzero(&remote_addr6,sizeof(remote_addr6));

				ret = recvfrom(sockfd,&buffer,500,0,(struct sockaddr *) &(remote_addr6), (socklen_t *)&(addr_size));
				if(ret != -1) 
				{
					// validate packet
					response = new CoapPDU((uint8_t*)buffer,ret);
					if ((response->validate()==1) && (response->getMessageID() == request->getMessageID()) && 
							(response->getType() == CoapPDU::COAP_ACKNOWLEDGEMENT)) 
					{	
						valid = 1;
						printf("Valid ACK CoAP PDU received\n");
						response->printHuman();
						response->printHex();
						delete response;					
						return 1;
					}
					else maxRetr--;

					delete response;

				} else maxRetr--;
			}
		} 
		else maxRetr--;

	} while (maxRetr != 0 && !valid);

	return -1;
}






int main(int argc, char **argv) {
	/*
	   unsigned int seq_length = 3*sizeof(unsigned int);			
	   sequence = (unsigned char *)xmalloc(seq_length);
	 */
	// parse options	
	if(argc!=5) {
		printf("USAGE\r\n   %s listenAddress listenPort remoteAddress remotePort\r\n",argv[0]);
		return 0;
	}

	char *listenAddressString = argv[1];
	char *listenPortString    = argv[2];
	char *remoteAddressString = argv[3];
	char *remotePortString    = argv[4];

	struct addrinfo bindAddr;
	struct addrinfo *local,*remoteAddress;

	memset(&bindAddr, 0, sizeof(struct addrinfo));
	bindAddr.ai_family = AF_UNSPEC; /* Allow IPv4 or IPv6 */
	bindAddr.ai_socktype = SOCK_DGRAM; /* Coap uses UDP */
	bindAddr.ai_flags = AI_PASSIVE | AI_NUMERICHOST;

	int s = getaddrinfo(listenAddressString, listenPortString, &bindAddr, &local);

	if (s != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
		return NULL;
	}

	// setup bind address
	INFO("Setting up bind address");
	printAddressStructures(&bindAddr);

	// setup socket
	int sockfd = socket(local->ai_family,local->ai_socktype,0);

	// call bind
	printf("Binding socket. %d\n",sockfd);
	if(bind(sockfd,local->ai_addr,local->ai_addrlen)!=0) {
		printf("Error binding socket");
		perror(NULL);
		failGracefully(5);
	}

	//
	printAddress(local);

	memset(&bindAddr, 0, sizeof(struct addrinfo));
	bindAddr.ai_family = AF_UNSPEC; /* Allow IPv4 or IPv6 */
	bindAddr.ai_socktype = SOCK_DGRAM; /* Coap uses UDP */
	bindAddr.ai_flags = AI_PASSIVE | AI_NUMERICHOST;

	s = getaddrinfo(remoteAddressString, remotePortString, &bindAddr, &remoteAddress);
	printAddress(remoteAddress);

	startAuth(sockfd,remoteAddress);

	// setup URI callbacks using uthash hash table
	struct URIHashEntry *entry = NULL, *directory = NULL, *hash = NULL;
	for(int i=0; i<gNumResources; i++) {
		// create new hash structure to bind URI and callback
		entry = (struct URIHashEntry*)malloc(sizeof(struct URIHashEntry));
		entry->uri = gURIList[i];
		entry->callback = gCallbacks[i];
		// add hash structure to hash table, note that key is the URI
		HASH_ADD_KEYPTR(hh, directory, entry->uri, strlen(entry->uri), entry);
	}

	// buffers for UDP and URIs
#define BUF_LEN 500
#define URI_BUF_LEN 32
	char buffer[BUF_LEN];
	char uriBuffer[URI_BUF_LEN];
	int recvURILen = 0;

	// storage for handling receive address
	struct sockaddr_storage recvAddr;
	socklen_t recvAddrLen = sizeof(struct sockaddr_storage);
	struct sockaddr_in *v4Addr;
	struct sockaddr_in6 *v6Addr;
	char straddr[INET6_ADDRSTRLEN];


	//create_eap_session(&current_session);


	// reuse the same PDU
	CoapPDU *recvPDU = new CoapPDU((uint8_t*)buffer,BUF_LEN,BUF_LEN);

	// just block and handle one packet at a time in a single thread
	// you're not going to use this code for a production system are you ;)
	while(1) {
		// receive packet
		int ret = recvfrom(sockfd,&buffer,BUF_LEN,0,(sockaddr*)&recvAddr,&recvAddrLen);
		if(ret==-1) {
			INFO("Error receiving data");
			return -1;
		}

		// print src address
		switch(recvAddr.ss_family) {
			case AF_INET:
				v4Addr = (struct sockaddr_in*)&recvAddr;
				INFO("Got packet from %s:%d",inet_ntoa(v4Addr->sin_addr),ntohs(v4Addr->sin_port));
				break;

			case AF_INET6:
				v6Addr = (struct sockaddr_in6*)&recvAddr;
				INFO("Got packet from %s:%d",inet_ntop(AF_INET6,&v6Addr->sin6_addr,straddr,sizeof(straddr)),ntohs(v6Addr->sin6_port));
				break;
		}

		// validate packet
		if(ret>BUF_LEN) {
			INFO("PDU too large to fit in pre-allocated buffer");
			continue;
		}
		recvPDU->setPDULength(ret);
		if(recvPDU->validate()!=1) {
			INFO("Malformed CoAP packet");
			continue;
		}
		INFO("Valid CoAP PDU received");
		recvPDU->printHuman();
		recvPDU->printHex();

		// depending on what this is, maybe call callback function
		if(recvPDU->getURI(uriBuffer,URI_BUF_LEN,&recvURILen)!=0) {
			INFO("Error retrieving URI");
			continue;
		}
		if(recvURILen==0) {
			INFO("There is no URI associated with this Coap PDU");
		} else {
			HASH_FIND_STR(directory,uriBuffer,hash);
			if(hash) {
				DBG("Hash id is %d.", hash->id);
				hash->callback(recvPDU,sockfd,&recvAddr);
				continue;
			} else {
				DBG("Hash not found.");
				continue;
			}
		}

		// no URI, handle cases

		// code==0, no payload, this is a ping request, send RST
		if(recvPDU->getPDULength()==0&&recvPDU->getCode()==0) {
			INFO("CoAP ping request");
		}

	}
	return 0;
}
