/* coap -- simple implementation of the Constrained Application Protocol (CoAP)
 *         as defined in draft-ietf-core-coap
 *
 * Copyright (C) 2010--2013 Olaf Bergmann <bergmann@tzi.org>
 *
 * This file is part of the CoAP library libcoap. Please see
 * README for terms of use. 
 */

#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <sys/select.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include <signal.h>

#include "libcoap-4.1.1/config.h"
#include "libcoap-4.1.1/resource.h"
#include "libcoap-4.1.1/coap.h"
#include "libcoap-4.1.1/prng.h"
#include "panatiki/include.h"
#include "panatiki/eap-peer.h"
#include "panatiki/eap-psk.h"

#define ISCLIENT

int flags = 0;
#define FLAGS_BLOCK 0x01
coap_block_t block = { .num = 0, .m = 0, .szx = 6 };
static str payload = { 0, NULL }; /* optional payload to send */                      


uint8_t *auth_key =NULL;


int nput = 0;
unsigned char location[8] = {0};
#define COAP_RESOURCE_CHECK_TIME 2

#ifndef min
#define min(a,b) ((a) < (b) ? (a) : (b))
#endif

unsigned int nonce_c;
unsigned int nonce_s;
unsigned int session_id;


void printf_hex(unsigned char *hex, unsigned int l)
{
	int i;
	if (hex != NULL){	
	for (i=0; i < l; i++)
		printf("%02x",hex[i]);

	printf("\n");
	}
}

void rand_num(char *dest, size_t length) {
    char charset[] = "0123456789";

    while (length-- > 0) {
        size_t index = (double) rand() / RAND_MAX * (sizeof charset - 1);
        *dest++ = charset[index];
    }
    *dest = '\0';
}

void rand_str(char *dest, size_t length) {
    char charset[] = "0123456789"
                     "abcdefghijklmnopqrstuvwxyz"
                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    while (length-- > 0) {
        size_t index = (double) rand() / RAND_MAX * (sizeof charset - 1);
        *dest++ = charset[index];
    }
    *dest = '\0';
}


// Check if a mac of a pdu is correct
// Take the pdu, calculate coap_raw_pdu
// calculate mac again and compare with original mac
// return 1 if mac is the same
int check_mac(unsigned char *key, unsigned char *mac, coap_pdu_t *pdu) {

  unsigned char macacero[16] = {0};
  int longitt;
 
  do_omac((unsigned char*)key, (unsigned char*)pdu->hdr, pdu->length,
             &macacero);
   

   printf("mac calculada \n");                                                                                    
    for(longitt=0;longitt<16;longitt++){
      printf("%02x",macacero[longitt]);
    }
    printf("\n");

  if (memcmp(mac,macacero,16)==0) return 1;
  return 0;
}


// overrides auth_option of a given pdu
// return mac in "mac"
// and modify pdu
// it assumes that pdu has an auth option to override
void override_auth_option_pdu(unsigned char *key, coap_pdu_t *pdu) {
  unsigned char macacero[16] = {0};
  coap_opt_iterator_t opt_iter;
  coap_opt_t *option;


    do_omac((unsigned char*)auth_key, (unsigned char*)pdu->hdr, pdu->length,
             &macacero);
   
    printf("mac que mando\n");                                                                                     
    int longitt;
    for(longitt=0;longitt<16;longitt++){
      printf("%02x",macacero[longitt]);
    }
    printf("\n");

  coap_option_iterator_init((coap_pdu_t *)pdu, &opt_iter, COAP_OPT_ALL);                                         
  while ((option = coap_option_next(&opt_iter))) {
    if (opt_iter.type == COAP_OPTION_AUTH){
      memcpy(COAP_OPT_VALUE(option), &macacero,16);
    }
  }
  return;
}
/* temporary storage for dynamic resource representations */
static int quit = 0;

/* Key material */
unsigned char* key;
/* changeable clock base (see handle_put_time()) */
static time_t my_clock_base = 0;

struct coap_resource_t *time_resource = NULL;

unsigned int wait_seconds = 90; /* default timeout in seconds */
coap_tick_t max_wait; /* global timeout (changed by set_timeout()) */

static coap_list_t *optlist = NULL;
static coap_uri_t uri;                                                                       
static str proxy = { 0, NULL };
static unsigned short proxy_port = COAP_DEFAULT_PORT;

unsigned int obs_seconds = 30; /* default observe time */
coap_tick_t obs_wait = 0; /* timeout for current subscription */

static int ready = 0;

typedef unsigned char method_t;                                                              
method_t method = 1; /* the method we are using in our requests */

static unsigned char _token_data[8] = "12345678";
str the_token = { 0, _token_data };

unsigned char msgtype = COAP_MESSAGE_CON; /* usually, requests are sent confirmable */       




#ifndef WITHOUT_ASYNC
/* This variable is used to mimic long-running tasks that require
 * asynchronous responses. */
static coap_async_state_t *async = NULL;
#endif /* WITHOUT_ASYNC */

#define OK "OK"
#define TEMP "22.5º"

/* SIGINT handler: set quit to 1 for graceful termination */
void handle_sigint(int signum) {
  quit = 1;
}

/* HANDLER POST /auth */
void hnd_post_auth(coap_context_t *ctx, struct coap_resource_t *resource,
    coap_address_t *peer, coap_pdu_t *request, str *token, coap_pdu_t *response) {
  unsigned char buf[3];
  unsigned char *data = NULL;
  size_t size;

  printf("\n ******* PRIMER POST ****** \n");

  coap_get_data(request, &size, &data);

  memcpy(&nonce_c, data,4);
  printf("nonce_c %d\n", (unsigned int)nonce_c);
  printf_hex(&nonce_c, 4);
  prng(&nonce_s,sizeof(unsigned int));
  printf("nonce_s %d\n", (unsigned int)nonce_s);
  

  coap_show_pdu(request);

  memcpy(&session_id,response->hdr->token,request->hdr->token_length);
  printf("session id %d\n", (unsigned int) session_id);
  
  response->hdr->code = COAP_RESPONSE_CODE(205);

  //sleep(15);

  // Devolvemos el token que llega
  printf("Me llega Token: %s\n", response->hdr->token); 
  response->hdr->token_length = request->hdr->token_length;
  if (!coap_add_token(response, request->hdr->token_length, request->hdr->token)) {
        debug("cannot add token to request\n");
          }

  rand_str(&location,1);
  // Añadimos recurso de vuelta
  coap_add_option(response, COAP_OPTION_LOCATION_PATH,1,location);
   /*coap_add_option(response, COAP_OPTION_CONTENT_TYPE,
       coap_encode_var_bytes(buf, COAP_MEDIATYPE_APPLICATION_OCTET_STREAM), buf);*/
  coap_add_data(response, 4, (unsigned char *) &nonce_s);
}


/* Handler PUT /auth */
void hnd_put_auth(coap_context_t *ctx, struct coap_resource_t *resource,
    coap_address_t *peer, coap_pdu_t *request, str *token, coap_pdu_t *response) {
  unsigned char buf[3];
  size_t size;
  unsigned char *data;
  int longitt = 0;
  unsigned char mac[16] = {0};
  unsigned char macacero[16] = {0};
  coap_opt_iterator_t opt_iter;  
  coap_opt_t *option;


  nput++;

  printf("\n ******** PUT NUMERO %d ******** \n",nput);
  printf("Recibimos paquete\n");
  coap_show_pdu(request);

// Capturamos paquete de entrada
//  unsigned char buf2[COAP_MAX_PDU_SIZE] = {0};
//  coap_raw_pdu(request, &buf2);

  response->hdr->code = COAP_RESPONSE_CODE(205);

  // Devolvemos el token que llega
  printf("Me llega Token: %s\n", response->hdr->token); 
  response->hdr->token_length = request->hdr->token_length;
  if (!coap_add_token(response, request->hdr->token_length, request->hdr->token)) {
        debug("cannot add token to request\n");
          }

  
  // RAUL

  coap_get_data(request, &size, &data);

  /****************EAP************/

  eapReq = TRUE;
  eap_peer_sm_step(data);

  //sleep(1);

size_t key_len;

	if (eapKeyAvailable)
	{
		
		if (msk_key) {
    			printf("\n** TENEMOS CLAVE: ");
		
    			for(i=0; i< key_len;i++){
          			printf("%02x",msk_key[i]);
        		}
    			printf("\n");
			unsigned int seq_length = 3*sizeof(unsigned int);			
			unsigned char *sequence = XMALLOC(unsigned char, seq_length);
			unsigned char *ptr = sequence;
			
			auth_key = XMALLOC(u8,16);
			memcpy(ptr,&session_id,sizeof(unsigned int));
			ptr += sizeof(unsigned int);			
			memcpy(ptr, &nonce_c,sizeof(unsigned int));
			ptr += sizeof(unsigned int);			
			memcpy(ptr, &nonce_s,sizeof(unsigned int));
			printf("sequence: \n");
			printf_hex(sequence, seq_length);
			
			do_omac((unsigned char*)msk_key, (unsigned char*)sequence, (int)seq_length,
             (unsigned char*)auth_key);

			printf("AUTH key generated\n");
			printf_hex(auth_key,16);
		}
	/* Capturamos el auth option y lo metemos en mac */
		bool auth_option_present=FALSE;
    		coap_option_iterator_init((coap_pdu_t *)request, &opt_iter, COAP_OPT_ALL);
    		while ((option = coap_option_next(&opt_iter))) {
      			if (opt_iter.type == COAP_OPTION_AUTH){
        			memcpy(mac, COAP_OPT_VALUE(option), 16);
				memset(COAP_OPT_VALUE(option),0,16);
				auth_option_present=TRUE;
				
      			}
		}
		if (auth_option_present)
		{        	
			printf("mac que llega\n");
    			for(i=0;i<16;i++){
     		 		printf("%02x",mac[i]);
    			}
    			printf("\n");

    			if (check_mac(auth_key, &mac,request)) {
      				printf("MAC IGUALES\n");    
    			}
    			else {
      				printf("MAC DIFERENTES\n");
    			}
		} else printf("AUTH not present!!!\n");
		
		coap_add_option(response, COAP_OPTION_AUTH,16,0);
		override_auth_option_pdu(auth_key, response);
		
	}

  	
  //}
 	coap_add_option(response, COAP_OPTION_CONTENT_TYPE,
 	coap_encode_var_bytes(buf, COAP_MEDIATYPE_APPLICATION_OCTET_STREAM), buf);
	coap_add_data(response,((struct eap_msg*) eapRespData)->length,eapRespData);

  printf("Envio Paquete: \n");
  printf_hex(response->hdr,response->length);
}


/* HANDLER GET /temp */
void hnd_get_temp(coap_context_t *ctx, struct coap_resource_t *resource,
    coap_address_t *peer, coap_pdu_t *request, str *token, coap_pdu_t *response) {
  unsigned char buf[3];
  int longitt = 0;
  unsigned char mac[16] = {0};
  unsigned char macacero[16] = {0};
  coap_opt_iterator_t opt_iter;  
  coap_opt_t *option;


  printf("\n ******* GET /temp ****** \n");
  printf("Recibimos paquete\n");
  coap_show_pdu(request);

  response->hdr->code = COAP_RESPONSE_CODE(205);

  // Devolvemos el token que llega
  printf("Me llega Token: %s\n", response->hdr->token); 
  response->hdr->token_length = request->hdr->token_length;
  if (!coap_add_token(response, request->hdr->token_length, request->hdr->token)) {
        debug("cannot add token to request\n");
          }

  rand_str(&location,8);
  // Añadimos recurso de vuelta
   coap_add_option(response, COAP_OPTION_CONTENT_TYPE,
       coap_encode_var_bytes(buf, COAP_MEDIATYPE_TEXT_PLAIN), buf);


  if (key) {
    printf("\n** TENEMOS CLAVE: ");
    for(longitt=0;longitt<16;longitt++){
          printf("%02x",key[longitt]);
        }
    printf("\n"); 

   
    /* Capturamos el auth option y lo metemos en mac */
    coap_option_iterator_init((coap_pdu_t *)request, &opt_iter, COAP_OPT_ALL);
    while ((option = coap_option_next(&opt_iter))) {
      if (opt_iter.type == COAP_OPTION_AUTH){
        memcpy(mac, COAP_OPT_VALUE(option), 16);
      }
    }                     

    printf("mac que llega\n");
    for(longitt=0;longitt<16;longitt++){
      printf("%02x",mac[longitt]);
    }
    printf("\n");

    if (check_mac(key, &mac,request)) {
      printf("MAC IGUALES\n");    
    }
    else {
      printf("MAC DIFERENTES\n");
    }
	coap_add_option(response, COAP_OPTION_AUTH,16,0);
  }
  coap_add_data(response, strlen(TEMP), (unsigned char *) TEMP);

  if (key) {
    //override_auth_option_pdu(key, &mac, response);
  }
  printf("Envio Paquete: ");
  coap_show_pdu(response);

}




void init_resources(coap_context_t *ctx) {
  coap_resource_t *r;
  r = coap_resource_init((unsigned char *) "auth", 4, 0);
  coap_register_handler(r, COAP_REQUEST_POST, hnd_post_auth);
  coap_register_handler(r, COAP_REQUEST_PUT, hnd_put_auth);
  coap_add_resource(ctx, r);
  r = coap_resource_init((unsigned char *) "temp", 4, 0);
  coap_register_handler(r, COAP_REQUEST_GET, hnd_get_temp);
  coap_add_resource(ctx, r);
}


void usage(const char *program, const char *version) {
  const char *p;

  p = strrchr(program, '/');
  if (p)
    program = ++p;

  fprintf( stderr, "%s v%s -- EAP CoAP mote\n"
      "2014 Raul Sanchez <raul@um.es>\n\n"
      "usage: %s [-A address] [-p port]\n\n"
      "\t-A address\tinterface address to bind to\n"
      "\t-p port\t\tlisten on specified port\n"
      "\t-v num\t\tverbosity level (default: 3)\n", program, version,
      program);
}

coap_context_t *
get_context(const char *node, const char *port) {
  coap_context_t *ctx = NULL;
  int s;
  struct addrinfo hints;
  struct addrinfo *result, *rp;

  memset(&hints, 0, sizeof(struct addrinfo));
  hints.ai_family = AF_UNSPEC; /* Allow IPv4 or IPv6 */
  hints.ai_socktype = SOCK_DGRAM; /* Coap uses UDP */
  hints.ai_flags = AI_PASSIVE | AI_NUMERICHOST;

  s = getaddrinfo(node, port, &hints, &result);
  if (s != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
    return NULL;
  }

  /* iterate through results until success */
  for (rp = result; rp != NULL; rp = rp->ai_next) {
    coap_address_t addr;

    if (rp->ai_addrlen <= sizeof(addr.addr)) {
      coap_address_init(&addr);
      addr.size = rp->ai_addrlen;
      memcpy(&addr.addr, rp->ai_addr, rp->ai_addrlen);

      ctx = coap_new_context(&addr);
      if (ctx) {
        /* TODO: output address:port for successful binding */
        goto finish;
      }
    }
  }

  fprintf(stderr, "no context available for interface '%s'\n", node);

finish: freeaddrinfo(result);
        return ctx;
}

static inline void set_timeout(coap_tick_t *timer, const unsigned int seconds) {
    coap_ticks(timer);
      *timer += seconds * COAP_TICKS_PER_SECOND;
}

coap_pdu_t *
new_ack(coap_context_t *ctx, coap_queue_t *node) {
    coap_pdu_t *pdu = coap_new_pdu();

      if (pdu) {
            pdu->hdr->type = COAP_MESSAGE_ACK;
                pdu->hdr->code = 0;
                    pdu->hdr->id = node->pdu->hdr->id;
                      }

        return pdu;
}             


coap_pdu_t *
coap_new_request(coap_context_t *ctx, method_t m, coap_list_t *options ) {
  coap_pdu_t *pdu;
  coap_list_t *opt;

  if ( ! ( pdu = coap_new_pdu() ) )
    return NULL;

  pdu->hdr->type = msgtype;
  pdu->hdr->id = coap_new_message_id(ctx);
  pdu->hdr->code = m;

  pdu->hdr->token_length = the_token.length;
  if ( !coap_add_token(pdu, the_token.length, the_token.s)) {
    debug("cannot add token to request\n");
  }

  coap_show_pdu(pdu);

  for (opt = options; opt; opt = opt->next) {
    coap_add_option(pdu, COAP_OPTION_KEY(*(coap_option *)opt->data),
		    COAP_OPTION_LENGTH(*(coap_option *)opt->data),
		    COAP_OPTION_DATA(*(coap_option *)opt->data));
  }

  if (payload.length) {
    if ((flags & FLAGS_BLOCK) == 0)
      coap_add_data(pdu, payload.length, payload.s);
    else
      coap_add_block(pdu, payload.length, payload.s, block.num, block.szx);
  }

  return pdu;
}



int order_opts(void *a, void *b) {
  if (!a || !b)
    return a < b ? -1 : 1;

  if (COAP_OPTION_KEY(*(coap_option *)a) < COAP_OPTION_KEY(*(coap_option * )b))
    return -1;

  return COAP_OPTION_KEY(*(coap_option * )a)
    == COAP_OPTION_KEY(*(coap_option * )b);
}



coap_list_t *
new_option_node(unsigned short key, unsigned int length, unsigned char *data) {              
  coap_option *option;
  coap_list_t *node;

  option = coap_malloc(sizeof(coap_option) + length);
  if (!option)
    goto error;

  COAP_OPTION_KEY(*option) = key;
  COAP_OPTION_LENGTH(*option) = length;
  memcpy(COAP_OPTION_DATA(*option), data, length);

  /* we can pass NULL here as delete function since option is released automatically  */
  node = coap_new_listnode(option, NULL);

  if (node)
    return node;

error: perror("new_option_node: malloc");
       coap_free(option);
       return NULL;
}




coap_tid_t clear_obs(coap_context_t *ctx, const coap_address_t *remote) {
  coap_list_t *option;
  coap_pdu_t *pdu;
  coap_tid_t tid = COAP_INVALID_TID;

  /* create bare PDU w/o any option  */
  pdu = coap_new_request(ctx, COAP_REQUEST_GET, NULL);

  if (pdu) {
    /* FIXME: add token */
    /* add URI components from optlist */
    for (option = optlist; option; option = option->next) {
      switch (COAP_OPTION_KEY(*(coap_option * )option->data)) {
        case COAP_OPTION_URI_HOST:
        case COAP_OPTION_URI_PORT:
        case COAP_OPTION_URI_PATH:
        case COAP_OPTION_URI_QUERY:
          coap_add_option(pdu,
              COAP_OPTION_KEY(*(coap_option * )option->data),
              COAP_OPTION_LENGTH(*(coap_option * )option->data),
              COAP_OPTION_DATA(*(coap_option * )option->data));
          break;
        default:
          ; /* skip other options */
      }
    }

    if (pdu->hdr->type == COAP_MESSAGE_CON)
      tid = coap_send_confirmed(ctx, remote, pdu);
    else
      tid = coap_send(ctx, remote, pdu);

    if (tid == COAP_INVALID_TID) {
      debug("clear_obs: error sending new request");
      coap_delete_pdu(pdu);
    } else if (pdu->hdr->type != COAP_MESSAGE_CON)
      coap_delete_pdu(pdu);
  }
  return tid;
}

int resolve_address(const str *server, struct sockaddr *dst) {

  struct addrinfo *res, *ainfo;
  struct addrinfo hints;
  static char addrstr[256];
  int error, len = -1;

  memset(addrstr, 0, sizeof(addrstr));
  if (server->length)
    memcpy(addrstr, server->s, server->length);
  else
    memcpy(addrstr, "localhost", 9);

  memset((char *) &hints, 0, sizeof(hints));
  hints.ai_socktype = SOCK_DGRAM;
  hints.ai_family = AF_UNSPEC;

  error = getaddrinfo(addrstr, "", &hints, &res);

  if (error != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(error));
    return error;
  }

  for (ainfo = res; ainfo != NULL; ainfo = ainfo->ai_next) {
    switch (ainfo->ai_family) {
      case AF_INET6:
      case AF_INET:
        len = ainfo->ai_addrlen;
        memcpy(dst, ainfo->ai_addr, len);
        goto finish;
      default:
        ;
    }
  }

finish: freeaddrinfo(res);
        return len;
}

static inline coap_opt_t *
get_block(coap_pdu_t *pdu, coap_opt_iterator_t *opt_iter) {
  coap_opt_filter_t f;

  assert(pdu);

  memset(f, 0, sizeof(coap_opt_filter_t));
  coap_option_setb(f, COAP_OPTION_BLOCK1);
  coap_option_setb(f, COAP_OPTION_BLOCK2);

  coap_option_iterator_init(pdu, opt_iter, f);
  return coap_option_next(opt_iter);
}

#define HANDLE_BLOCK1(Pdu)						\
  ((method == COAP_REQUEST_PUT || method == COAP_REQUEST_POST) &&	\
   ((flags & FLAGS_BLOCK) == 0) &&					\
   ((Pdu)->hdr->code == COAP_RESPONSE_CODE(201) ||			\
    (Pdu)->hdr->code == COAP_RESPONSE_CODE(204)))

inline int check_token(coap_pdu_t *received) {
  return received->hdr->token_length == the_token.length
    && memcmp(received->hdr->token, the_token.s, the_token.length) == 0;
}





void cmdline_uri(char *arg) {
  unsigned char portbuf[2];
#define BUFSIZE 40
  unsigned char _buf[BUFSIZE];
  unsigned char *buf = _buf;
  size_t buflen;
  int res;

  if (proxy.length) { /* create Proxy-Uri from argument */
    size_t len = strlen(arg);
    while (len > 270) {
      coap_insert(&optlist,
          new_option_node(COAP_OPTION_PROXY_URI, 270,
            (unsigned char *) arg), order_opts);
      len -= 270;
      arg += 270;
    }

    coap_insert(&optlist,
        new_option_node(COAP_OPTION_PROXY_URI, len,
          (unsigned char *) arg), order_opts);
  } else { /* split arg into Uri-* options */
    coap_split_uri((unsigned char *) arg, strlen(arg), &uri);

    if (uri.port != COAP_DEFAULT_PORT) {
      coap_insert(&optlist,
          new_option_node(COAP_OPTION_URI_PORT,
            coap_encode_var_bytes(portbuf, uri.port), portbuf),
          order_opts);
    }

    if (uri.path.length) {
      buflen = BUFSIZE;
      res = coap_split_path(uri.path.s, uri.path.length, buf, &buflen);

      while (res--) {
        coap_insert(&optlist,
            new_option_node(COAP_OPTION_URI_PATH,
              COAP_OPT_LENGTH(buf), COAP_OPT_VALUE(buf)),
            order_opts);

        buf += COAP_OPT_SIZE(buf);
      }
    }

    if (uri.query.length) {
      buflen = BUFSIZE;
      buf = _buf;
      res = coap_split_query(uri.query.s, uri.query.length, buf, &buflen);

      while (res--) {
        coap_insert(&optlist,
            new_option_node(COAP_OPTION_URI_QUERY,
              COAP_OPT_LENGTH(buf), COAP_OPT_VALUE(buf)),
            order_opts);

        buf += COAP_OPT_SIZE(buf);
      }
    }
  }
}


void message_handler(struct coap_context_t *ctx, const coap_address_t *remote,
    coap_pdu_t *sent, coap_pdu_t *received, const coap_tid_t id) {

  coap_pdu_t *pdu = NULL;
  coap_opt_t *block_opt;
  coap_opt_iterator_t opt_iter;
  coap_opt_iterator_t opt_iter2;
  unsigned char buf[4];
  coap_list_t *option;
  coap_list_t *option2;
  size_t len;
  unsigned char *databuf;
  coap_tid_t tid;

  printf("Recibimos paquete: ");
  coap_show_pdu(received);

  // metemos en la variable location el location_path
  coap_option_iterator_init((coap_pdu_t *)received, &opt_iter2, COAP_OPT_ALL);
  while ((option2 = coap_option_next(&opt_iter2))) {
    if (opt_iter2.type == COAP_OPTION_LOCATION_PATH ){
      memcpy(location,COAP_OPT_VALUE(option2),8);
    }
  }



  /* check if this is a response to our original request */
  if (!check_token(received)) {
    /* drop if this was just some message, or send RST in case of notification */
    if (!sent
        && (received->hdr->type == COAP_MESSAGE_CON
          || received->hdr->type == COAP_MESSAGE_NON))
      coap_send_rst(ctx, remote, received);
    return;
  }

  switch (received->hdr->type) {
    case COAP_MESSAGE_CON:
      /* acknowledge received response if confirmable (TODO: check Token) */
      coap_send_ack(ctx, remote, received);
      break;
    case COAP_MESSAGE_RST:
      info("got RST\n");
      return;
    default:
      ;
  }

  /* output the received data, if any */
  if (received->hdr->code == COAP_RESPONSE_CODE(205)) {

    /* set obs timer if we have successfully subscribed a resource */
    if (sent
        && coap_check_option(received, COAP_OPTION_SUBSCRIPTION,
          &opt_iter)) {
      debug("observation relationship established, set timeout to %d\n",
          obs_seconds);
      set_timeout(&obs_wait, obs_seconds);
    }

    /* Got some data, check if block option is set. Behavior is undefined if
     * both, Block1 and Block2 are present. */
    block_opt = get_block(received, &opt_iter);
    if (!block_opt) {
      /* There is no block option set, just read the data and we are done. */
      if (coap_get_data(received, &len, &databuf))
        //        append_to_output(databuf, len);
        printf(" ");
    } else {
      unsigned short blktype = opt_iter.type;

      /* TODO: check if we are looking at the correct block number */
      if (coap_get_data(received, &len, &databuf))
        // append_to_output(databuf, len);
        printf("");

      if (COAP_OPT_BLOCK_MORE(block_opt)) {
        /* more bit is set */
        /*debug("found the M bit, block size is %u, block nr. %u\n",
            COAP_OPT_BLOCK_SZX(block_opt),
            COAP_OPT_BLOCK_NUM(block_opt));*/ /*RAFa: Eliminado*/

        /* create pdu with request for next block */
        pdu = coap_new_request(ctx, method, NULL); /* first, create bare PDU w/o any option  */
        if (pdu) {
          /* add URI components from optlist */
          for (option = optlist; option; option = option->next) {
            switch (COAP_OPTION_KEY(*(coap_option * )option->data)) {
              case COAP_OPTION_URI_HOST:
              case COAP_OPTION_URI_PORT:
              case COAP_OPTION_URI_PATH:
              case COAP_OPTION_URI_QUERY:
                coap_add_option(pdu,
                    COAP_OPTION_KEY(
                      *(coap_option * )option->data),
                    COAP_OPTION_LENGTH(
                      *(coap_option * )option->data),
                    COAP_OPTION_DATA(
                      *(coap_option * )option->data));
                break;
              default:
                ; /* skip other options */
            }
          }

          /* finally add updated block option from response, clear M bit */
          /* blocknr = (blocknr & 0xfffffff7) + 0x10; */
          /*debug("query block %d\n",
              (COAP_OPT_BLOCK_NUM(block_opt) + 1));
          coap_add_option(pdu, blktype,
              coap_encode_var_bytes(buf,
                ((COAP_OPT_BLOCK_NUM(block_opt) + 1) << 4)
                | COAP_OPT_BLOCK_SZX(block_opt)),
              buf);*/

          if (received->hdr->type == COAP_MESSAGE_CON)
            tid = coap_send_confirmed(ctx, remote, pdu);
          else
            tid = coap_send(ctx, remote, pdu);

          if (tid == COAP_INVALID_TID) {
            debug("message_handler: error sending new request");
            coap_delete_pdu(pdu);
          } else {
            set_timeout(&max_wait, wait_seconds);
            if (received->hdr->type != COAP_MESSAGE_CON)
              coap_delete_pdu(pdu);
          }

          return;
        }
      }
    }
  } else { /* no 2.05 */

    /* check if an error was signaled and output payload if so */
    if (COAP_RESPONSE_CLASS(received->hdr->code) >= 4) {
      fprintf(stderr, "%d.%02d", (received->hdr->code >> 5),
          received->hdr->code & 0x1F);
      if (coap_get_data(received, &len, &databuf)) {
        fprintf(stderr, " ");
        while (len--)
          fprintf(stderr, "%c", *databuf++);
      }
      fprintf(stderr, "\n");
    }

  }

  /* finally send new request, if needed */
  if (pdu && coap_send(ctx, remote, pdu) == COAP_INVALID_TID) {
    debug("message_handler: error sending response");
  }
  coap_delete_pdu(pdu);

  /* our job is done, we can exit at any time */
  ready = coap_check_option(received, COAP_OPTION_SUBSCRIPTION,
      &opt_iter) == NULL;
}



int main(int argc, char **argv) {
  //unsigned char* peer_init = eap_coap_peer_init();

  coap_context_t *ctx;
  fd_set readfds;
  struct timeval tv, *timeout;
  int result;
  coap_tick_t now;
  coap_queue_t *nextpdu;
  char addr_str[NI_MAXHOST] = "::";
  char port_str[NI_MAXSERV] = "5683";
  int opt, res;
  coap_log_t log_level = LOG_EMERG;

  coap_pdu_t *pdu;
  coap_tid_t tid = COAP_INVALID_TID;
  static char addr[INET6_ADDRSTRLEN];
  void *addrptr = NULL;
  static str server;
  coap_address_t dst;
  unsigned short port = COAP_DEFAULT_PORT;


  while ((opt = getopt(argc, argv, "A:p:v:")) != -1) {
    switch (opt) {
      case 'A':
        strncpy(addr_str, optarg, NI_MAXHOST - 1);
        addr_str[NI_MAXHOST - 1] = '\0';
        break;
      case 'p':
        strncpy(port_str, optarg, NI_MAXSERV - 1);
        port_str[NI_MAXSERV - 1] = '\0';
        break;
      case 'v':
        log_level = strtol(optarg, NULL, 10);
        break;
      default:
        usage(argv[0], PACKAGE_VERSION);
        exit(1);
    }
  }

   memset(msk_key,0, MSK_LENGTH);
   eapRestart=TRUE;
   eap_peer_sm_step(NULL);


  
  //MANDAMOS PRIMER GET

    char addr_str2[NI_MAXHOST] = "::";
    char port_str_server[NI_MAXSERV] = "8000";
    //char port_str_client[NI_MAXSERV] = "9000";
    coap_context_t *ctx_server=get_context(addr_str2,port_str_server);
init_resources(ctx_server);
  
  cmdline_uri("coap://[::1]/auth");
  server = uri.host;
  port = uri.port;

  /* resolve destination address where server should be sent */
  res = resolve_address(&server, &dst.addr.sa);

  if (res < 0) {
    fprintf(stderr, "failed to resolve address\n");
    exit(-1);
  }

  dst.size = res;
  dst.addr.sin.sin_port = htons(port);

  /* add Uri-Host if server address differs from uri.host */

  switch (dst.addr.sa.sa_family) {
    case AF_INET:
      addrptr = &dst.addr.sin.sin_addr;                                               

      /* create context for IPv4 */
      ctx = get_context("0.0.0.0", port_str);
      break;
    case AF_INET6:
      addrptr = &dst.addr.sin6.sin6_addr;

      /* create context for IPv6 */
      ctx = get_context("::1", "7000");
      break;
    default:
      ;
  }

    /* Fin captura y resolucion de dirección autenticador */

  if (!ctx) {
    coap_log(LOG_EMERG, "cannot create context\n");
    return -1;
  }

  coap_register_option(ctx, COAP_OPTION_BLOCK2);
  coap_register_response_handler(ctx, message_handler);

  
  
  unsigned int method = 1;
  if (!(pdu = coap_new_request(ctx, method, optlist)))
    return -1;

  if (pdu->hdr->type == COAP_MESSAGE_CON) 
    tid = coap_send_confirmed(ctx, &dst, pdu);
  else
    tid = coap_send(ctx, &dst, pdu);

  if (pdu->hdr->type != COAP_MESSAGE_CON || tid == COAP_INVALID_TID)
    coap_delete_pdu(pdu);

  set_timeout(&max_wait, wait_seconds);
  debug("timeout is set to %d seconds\n", wait_seconds);

  while (!(ready && coap_can_exit(ctx))) {
    FD_ZERO(&readfds);
    FD_SET(ctx->sockfd, &readfds);

    nextpdu = coap_peek_next(ctx);

    coap_ticks(&now);
    while (nextpdu && nextpdu->t <= now) {
      coap_retransmit(ctx, coap_pop_next(ctx));
      nextpdu = coap_peek_next(ctx);
    }

    if (nextpdu
        && nextpdu->t < min(obs_wait ? obs_wait : max_wait, max_wait)) {
      /* set timeout if there is a pdu to send */
      tv.tv_usec = ((nextpdu->t - now) % COAP_TICKS_PER_SECOND)
        * 1000000/ COAP_TICKS_PER_SECOND;
      tv.tv_sec = (nextpdu->t - now) / COAP_TICKS_PER_SECOND;
    } else {
      /* check if obs_wait fires before max_wait */
      if (obs_wait && obs_wait < max_wait) {
        tv.tv_usec = ((obs_wait - now) % COAP_TICKS_PER_SECOND)
          * 1000000 / COAP_TICKS_PER_SECOND;
        tv.tv_sec = (obs_wait - now) / COAP_TICKS_PER_SECOND;
      } else {
        tv.tv_usec = ((max_wait - now) % COAP_TICKS_PER_SECOND)
          * 1000000 / COAP_TICKS_PER_SECOND;
        tv.tv_sec = (max_wait - now) / COAP_TICKS_PER_SECOND;
      }
    }

    result = select(ctx->sockfd + 1, &readfds, 0, 0, &tv);

    if (result < 0) { /* error */
      perror("select");
    } else if (result > 0) { /* read from socket */
      if (FD_ISSET(ctx->sockfd, &readfds)) {
        coap_read(ctx); /* read received data */

        if (!ctx)
          return -1;
//        coap_get_data(ctx->recvqueue->pdu, &longituddatosack, &datosdelack);
//        longg = longituddatosack;
        coap_dispatch(ctx); /* and dispatch PDUs from receivequeue */
      }
    } else { /* timeout */
      coap_ticks(&now);
      if (max_wait <= now) {
        info("timeout\n");
        break;
      }
    }
  }



  // INICIAMOS SERVER

	printf("MODO SERVIDOR\n");
  coap_set_log_level(log_level);

  printf("PORT: %s\n", port_str_server);
  if (!ctx)
    return -1;

  

  signal(SIGINT, handle_sigint);

  while (!quit) {
    FD_ZERO(&readfds);
    FD_SET(ctx_server->sockfd, &readfds);

    nextpdu = coap_peek_next(ctx_server);

    coap_ticks(&now);
    while (nextpdu && nextpdu->t <= now) {
      coap_retransmit(ctx, coap_pop_next(ctx_server));
      nextpdu = coap_peek_next(ctx_server);
    }

    if (nextpdu && nextpdu->t <= now + COAP_RESOURCE_CHECK_TIME) {
      /* set timeout if there is a pdu to send before our automatic timeout occurs */
      tv.tv_usec = ((nextpdu->t - now) % COAP_TICKS_PER_SECOND)
        * 1000000/ COAP_TICKS_PER_SECOND;
      tv.tv_sec = (nextpdu->t - now) / COAP_TICKS_PER_SECOND;
      timeout = &tv;
    } else {
      tv.tv_usec = 0;
      tv.tv_sec = COAP_RESOURCE_CHECK_TIME;
      timeout = &tv;
    }
    result = select( FD_SETSIZE, &readfds, 0, 0, timeout);

    if (result < 0) { /* error */
      if (errno != EINTR)
        perror("select");
    } else if (result > 0) { /* read from socket */
      if (FD_ISSET(ctx_server->sockfd, &readfds)) {
        coap_read(ctx_server); /* read received data */
        coap_dispatch(ctx_server); /* and dispatch PDUs from receivequeue */
      }
    } else { /* timeout */
      if (time_resource) {
        time_resource->dirty = 1;
      }
    }
  }

  coap_free_context(ctx_server);
  printf("**********FIN MAIN MOTA**********\n");
  return 0;
}
